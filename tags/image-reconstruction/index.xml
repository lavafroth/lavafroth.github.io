<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Image Reconstruction on lavafroth</title><link>https://lavafroth.is-a.dev/tags/image-reconstruction/</link><description>Recent content in Image Reconstruction on lavafroth</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 03 Mar 2023 09:47:54 +0530</lastBuildDate><atom:link href="https://lavafroth.is-a.dev/tags/image-reconstruction/index.xml" rel="self" type="application/rss+xml"/><item><title>Java Script Kiddie 2</title><link>https://lavafroth.is-a.dev/post/picoctf-web-java-script-kiddie-2/</link><pubDate>Fri, 03 Mar 2023 09:47:54 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/picoctf-web-java-script-kiddie-2/</guid><description>The challenge This is a web challenge involving javascript, meaning most of the solution is going to be client side. We are asked to visit the challenge page.
From here, we can view the source code of the page.
&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;script src=&amp;#34;jquery-3.3.1.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; var bytes = []; $.get(&amp;#34;bytes&amp;#34;, function(resp) { bytes = Array.from(resp.split(&amp;#34; &amp;#34;), x =&amp;gt; Number(x)); }); function assemble_png(u_in){ var LEN = 16; var key = &amp;#34;00000000000000000000000000000000&amp;#34;; var shifter; if(u_in.</description></item><item><title>Pixelated</title><link>https://lavafroth.is-a.dev/post/picoctf-cryptography-pixelated/</link><pubDate>Tue, 22 Nov 2022 09:25:20 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/picoctf-cryptography-pixelated/</guid><description>This challenge gives use two images and asks us if we can make a flag out of them. At first glance, both the images look like noise. Upon a quick web lookup of visual cryptography, it appears that these separate images, known as shares of the original image, can be overlayed on each other to reconstruct the original image.
Exploration Now, I&amp;rsquo;m pretty sure that there are online services that will automatically solve these but I decided to write some code to solve this locally.</description></item></channel></rss>