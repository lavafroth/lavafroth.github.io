<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cryptography on lavafroth</title><link>https://lavafroth.is-a.dev/tags/cryptography/</link><description>Recent content in Cryptography on lavafroth</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 10 Jan 2024 19:51:32 +0530</lastBuildDate><atom:link href="https://lavafroth.is-a.dev/tags/cryptography/index.xml" rel="self" type="application/rss+xml"/><item><title>Kringlecon 2023 Writeup</title><link>https://lavafroth.is-a.dev/post/kringlecon-2023-writeup/</link><pubDate>Wed, 10 Jan 2024 19:51:32 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/kringlecon-2023-writeup/</guid><description>Happy new year everyone! As every year, I&amp;rsquo;ll begin this one with sharing my writeup for the 2023 Holiday Hack Challenge for Kringlecon. I must warn you that this is an incomplete writeup, I had been unable to finish all the challenges due to other important events in life.
With that out of the way, enjoy the writeup!
Christmas Island: Orientation Cranberry Pi answer
Christmas Island: Frosty&amp;rsquo;s Beach Snowball Fight We begin with a small snowball fight mini-game called Santa&amp;rsquo;s Snowball Hero where we can either team up with a random player to fight against santa or play in a private room.</description></item><item><title>Compact XOR</title><link>https://lavafroth.is-a.dev/post/compact-xor-crypto-challenge-amateursctf-2023/</link><pubDate>Thu, 24 Aug 2023 18:05:59 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/compact-xor-crypto-challenge-amateursctf-2023/</guid><description>Description I found some hex in a file called fleg, but I’m not sure how it’s encoded. I’m pretty sure it’s some kind of xor…
Exploration We begin by creating a new rust project.
cargo new amateurs cd amateurs cargo add hex cargo add itertools Let&amp;rsquo;s decode the hexadecimal contents of the file using the following Rust code:
fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; { let bytes = hex::decode(&amp;#34;610c6115651072014317463d73127613732c73036102653a6217742b701c61086e1a651d742b69075f2f6c0d69075f2c690e681c5f673604650364023944&amp;#34;)?; let stream = String::from_utf8_lossy(&amp;amp;bytes); println!</description></item><item><title>Kringlecon 2022 Writeup</title><link>https://lavafroth.is-a.dev/post/kringlecon-2022-writeup/</link><pubDate>Mon, 09 Jan 2023 10:36:35 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/kringlecon-2022-writeup/</guid><description>This writeup is rather haphazard as I jumped around from one place to another solving different unrelated challenges. Although the writeup covers all the challenges, it definitely is not sequential. Just wanted to point that out before diving in.
Clone with a Difference This challenge wants us to clone a git repository. It&amp;rsquo;s using git with ssh for cloning which doesn&amp;rsquo;t seem to work.
git clone git@haugfactory.com:asnowball/aws_scripts.git We can clone this the HTTPS way:</description></item><item><title>Pixelated</title><link>https://lavafroth.is-a.dev/post/picoctf-cryptography-pixelated/</link><pubDate>Tue, 22 Nov 2022 09:25:20 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/picoctf-cryptography-pixelated/</guid><description>This challenge gives use two images and asks us if we can make a flag out of them. At first glance, both the images look like noise. Upon a quick web lookup of visual cryptography, it appears that these separate images, known as shares of the original image, can be overlayed on each other to reconstruct the original image.
Exploration Now, I&amp;rsquo;m pretty sure that there are online services that will automatically solve these but I decided to write some code to solve this locally.</description></item><item><title>RingZer0 CTF Hash Me Reloaded</title><link>https://lavafroth.is-a.dev/post/r0-hash-me-reloaded/</link><pubDate>Fri, 19 Aug 2022 09:57:15 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/r0-hash-me-reloaded/</guid><description>In this RingZer0 challenge, we are to visit the challenge url where we are given 2 seconds to SHA512 hash the message represented by the binary provided string. We must send the response with the request parameter r. Let&amp;rsquo;s write a go program to do that.
First let&amp;rsquo;s declare the url as a constant.
const uri = &amp;#34;http://challenges.ringzer0team.com:10014/&amp;#34; We fetch the challenge page and defer closing its body once the program ends.</description></item><item><title>Hash Me Please</title><link>https://lavafroth.is-a.dev/post/r0-hash-me-please/</link><pubDate>Fri, 19 Aug 2022 09:57:00 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/r0-hash-me-please/</guid><description>In this RingZer0 challenge, we are asked to visit http://challenges.ringzer0team.com:10013/ and are given 2 seconds to hash the provided message using the SHA512 algorithm. We must send the response as http://challenges.ringzer0team.com:10013/?r=response and to do that, we&amp;rsquo;ll be using some Golang.
Let&amp;rsquo;s declare the URI as a constant.
const uri = &amp;#34;http://challenges.ringzer0team.com:10013/&amp;#34; We fetch the challenge page using the Get function from the http standard library, checking for errors along the way.</description></item></channel></rss>