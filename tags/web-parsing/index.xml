<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Web Parsing on lavafroth</title><link>https://lavafroth.is-a.dev/tags/web-parsing/</link><description>Recent content in Web Parsing on lavafroth</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 19 Aug 2022 09:57:34 +0530</lastBuildDate><atom:link href="https://lavafroth.is-a.dev/tags/web-parsing/index.xml" rel="self" type="application/rss+xml"/><item><title>I Saw a Little Elf</title><link>https://lavafroth.is-a.dev/post/r0-i-saw-a-little-elf/</link><pubDate>Fri, 19 Aug 2022 09:57:34 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/r0-i-saw-a-little-elf/</guid><description>Introduction This challenge asks us to connect to an webpage with a base64 encoded message. If we try to decode the message manually, the decoded message ends up either in a reversed ELF (Executable and Linkable Format) binary or more base64 to be decoded.
Trying this multiple times, it becomes apparent that the challenge reverses an ELF binary, encodes it one or more times in base64 and sends it to us.</description></item><item><title>RingZer0 CTF Hash Me Reloaded</title><link>https://lavafroth.is-a.dev/post/r0-hash-me-reloaded/</link><pubDate>Fri, 19 Aug 2022 09:57:15 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/r0-hash-me-reloaded/</guid><description>In this RingZer0 challenge, we are to visit the challenge url where we are given 2 seconds to SHA512 hash the message represented by the binary provided string. We must send the response with the request parameter r. Let&amp;rsquo;s write a go program to do that.
First let&amp;rsquo;s declare the url as a constant.
const uri = &amp;#34;http://challenges.ringzer0team.com:10014/&amp;#34; We fetch the challenge page and defer closing its body once the program ends.</description></item><item><title>Hash Me Please</title><link>https://lavafroth.is-a.dev/post/r0-hash-me-please/</link><pubDate>Fri, 19 Aug 2022 09:57:00 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/r0-hash-me-please/</guid><description>In this RingZer0 challenge, we are asked to visit http://challenges.ringzer0team.com:10013/ and are given 2 seconds to hash the provided message using the SHA512 algorithm. We must send the response as http://challenges.ringzer0team.com:10013/?r=response and to do that, we&amp;rsquo;ll be using some Golang.
Let&amp;rsquo;s declare the URI as a constant.
const uri = &amp;#34;http://challenges.ringzer0team.com:10013/&amp;#34; We fetch the challenge page using the Get function from the http standard library, checking for errors along the way.</description></item><item><title>Oh my God, they killed Kenny!</title><link>https://lavafroth.is-a.dev/post/oh-my-god-they-killed-kenny/</link><pubDate>Tue, 02 Aug 2022 09:26:51 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/oh-my-god-they-killed-kenny/</guid><description>Introduction Despite its infamy for profanity and dark, satiric humor, I&amp;rsquo;ve been a huge fan of South Park over the years. I&amp;rsquo;d like you to try out a random episode of South Park. Before you walk away saying, &amp;ldquo;Screw you guys, I&amp;rsquo;m going home&amp;rdquo;, I&amp;rsquo;ll be sharing a little trick to watch a random episode without even launching the browser.
Prerequisites: Nushell mpv youtube-dl or yt-dlp Gone scripting South Park&amp;rsquo;s official website has a route called random-episode which redirects us to, well, a random episode.</description></item></channel></rss>