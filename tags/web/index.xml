<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Web on lavafroth</title><link>https://lavafroth.is-a.dev/tags/web/</link><description>Recent content in Web on lavafroth</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 10 Jan 2024 19:51:32 +0530</lastBuildDate><atom:link href="https://lavafroth.is-a.dev/tags/web/index.xml" rel="self" type="application/rss+xml"/><item><title>Kringlecon 2023 Writeup</title><link>https://lavafroth.is-a.dev/post/kringlecon-2023-writeup/</link><pubDate>Wed, 10 Jan 2024 19:51:32 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/kringlecon-2023-writeup/</guid><description>Happy new year everyone! As every year, I&amp;rsquo;ll begin this one with sharing my writeup for the 2023 Holiday Hack Challenge for Kringlecon. I must warn you that this is an incomplete writeup, I had been unable to finish all the challenges due to other important events in life.
With that out of the way, enjoy the writeup!
Christmas Island: Orientation Cranberry Pi answer
Christmas Island: Frosty&amp;rsquo;s Beach Snowball Fight We begin with a small snowball fight mini-game called Santa&amp;rsquo;s Snowball Hero where we can either team up with a random player to fight against santa or play in a private room.</description></item><item><title>Waiting an Eternity</title><link>https://lavafroth.is-a.dev/post/wait-an-eternity-web-challenge-amateursctf-2023/</link><pubDate>Wed, 19 Jul 2023 07:53:17 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/wait-an-eternity-web-challenge-amateursctf-2023/</guid><description>This was a fairly straightforward and fun challenge that required a bit of common sense to solve. We are given the URL https://waiting-an-eternity.amt.rs to begin with.
Let&amp;rsquo;s use curl with its verbose flag to fetch this URL.
curl -v &amp;#34;https://waiting-an-eternity.amt.rs&amp;#34; We get a response that tells us to wait an enternity.
&amp;gt; GET / HTTP/2 &amp;gt; Host: waiting-an-eternity.amt.rs &amp;gt; User-Agent: curl/8.1.1 &amp;gt; Accept: */* &amp;gt; &amp;lt; HTTP/2 200 &amp;lt; content-type: text/html; charset=utf-8 &amp;lt; date: Tue, 18 Jul 2023 04:28:52 GMT &amp;lt; refresh: 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000; url=../../secret-site?</description></item><item><title>Java Code Analysis!?!</title><link>https://lavafroth.is-a.dev/post/picoctf-web-java-code-analysis/</link><pubDate>Sat, 18 Mar 2023 07:10:17 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/picoctf-web-java-code-analysis/</guid><description>To get started we are given the username &amp;ldquo;user&amp;rdquo; and password &amp;ldquo;user&amp;rdquo; to log into the BookShelf Pico web application. We are also given the source code of the application.
Taking a look at the src/main/java/io/github/nandandesai/pico/security subdirectory of the project, we see that it uses JWT.
Interestingly, the file SecretGenerator.java in the aforementioned directory contains a weak hardcoded &amp;ldquo;random&amp;rdquo; value ðŸ˜±.
@Service class SecretGenerator { private Logger logger = LoggerFactory.getLogger(SecretGenerator.class); private static final String SERVER_SECRET_FILENAME = &amp;#34;server_secret.</description></item><item><title>Java Script Kiddie 2</title><link>https://lavafroth.is-a.dev/post/picoctf-web-java-script-kiddie-2/</link><pubDate>Fri, 03 Mar 2023 09:47:54 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/picoctf-web-java-script-kiddie-2/</guid><description>The challenge This is a web challenge involving javascript, meaning most of the solution is going to be client side. We are asked to visit the challenge page.
From here, we can view the source code of the page.
&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;script src=&amp;#34;jquery-3.3.1.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; var bytes = []; $.get(&amp;#34;bytes&amp;#34;, function(resp) { bytes = Array.from(resp.split(&amp;#34; &amp;#34;), x =&amp;gt; Number(x)); }); function assemble_png(u_in){ var LEN = 16; var key = &amp;#34;00000000000000000000000000000000&amp;#34;; var shifter; if(u_in.</description></item><item><title>Some Assembly Required 3</title><link>https://lavafroth.is-a.dev/post/picoctf-web-some-assembly-required-3/</link><pubDate>Thu, 09 Feb 2023 16:39:08 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/picoctf-web-some-assembly-required-3/</guid><description>This is a web exploitation challenge from 2021. It&amp;rsquo;s pretty old but has less solves as of writing this post. I figured, it&amp;rsquo;s worth talking about.
We are told to visit http://mercury.picoctf.net:60022/index.html where we find a simple textbox prompting us to submit the flag.
Looking at the page source by pressing ctrl u, we see that it is sourcing javascript code from rTEuOmSfG3.js.
&amp;lt;script src=&amp;#34;rTEuOmSfG3.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; While examining the javascript, we will notice that it is obfuscated and packed.</description></item><item><title>Kringlecon 2022 Writeup</title><link>https://lavafroth.is-a.dev/post/kringlecon-2022-writeup/</link><pubDate>Mon, 09 Jan 2023 10:36:35 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/kringlecon-2022-writeup/</guid><description>This writeup is rather haphazard as I jumped around from one place to another solving different unrelated challenges. Although the writeup covers all the challenges, it definitely is not sequential. Just wanted to point that out before diving in.
Clone with a Difference This challenge wants us to clone a git repository. It&amp;rsquo;s using git with ssh for cloning which doesn&amp;rsquo;t seem to work.
git clone git@haugfactory.com:asnowball/aws_scripts.git We can clone this the HTTPS way:</description></item><item><title>JAuth</title><link>https://lavafroth.is-a.dev/post/picoctf-web-challenge-jauth/</link><pubDate>Tue, 22 Feb 2022 14:49:34 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/picoctf-web-challenge-jauth/</guid><description>The challenge description states that most web application developers use third party components without testing their security. It mentions some past affected companies, then asks us to identify and exploit the vulnerable component for the challenge at http://saturn.picoctf.net:52025/
The goal is to become an admin. We are provied with the username test and the password Test123! to look around.
The challenge is a dummy bank portal. On login, we see the message:</description></item><item><title>Notepad</title><link>https://lavafroth.is-a.dev/post/picoctf-web-challenge-notepad/</link><pubDate>Mon, 21 Feb 2022 09:24:30 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/picoctf-web-challenge-notepad/</guid><description>At first glance the webapp looks like a stripped down version of Pastebin where we can post a text / code snippet. After submitting the query, we are redirected to an html page containing the content of the post.
The first thing I tried was triggering XSS (cross site scripting) with the following:
&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt; The application source directory tree looks like the following:
. â”œâ”€â”€ app.py â”œâ”€â”€ Dockerfile â”œâ”€â”€ flag.txt â”œâ”€â”€ static â””â”€â”€ templates â”œâ”€â”€ errors â”‚ â”œâ”€â”€ bad_content.</description></item></channel></rss>