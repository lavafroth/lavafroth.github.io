<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PicoCTF on lavafroth</title><link>https://lavafroth.is-a.dev/tags/picoctf/</link><description>Recent content in PicoCTF on lavafroth</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 10 Apr 2023 08:44:28 +0530</lastBuildDate><atom:link href="https://lavafroth.is-a.dev/tags/picoctf/index.xml" rel="self" type="application/rss+xml"/><item><title>Twosum</title><link>https://lavafroth.is-a.dev/post/picoctf-binary-exploitation-twosum/</link><pubDate>Mon, 10 Apr 2023 08:44:28 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/picoctf-binary-exploitation-twosum/</guid><description>This is a rather simple binary exploitation challenge. We are given the following source code for the program running on the remote server:
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; static int addIntOvf(int result, int a, int b) { result = a + b; if(a &amp;gt; 0 &amp;amp;&amp;amp; b &amp;gt; 0 &amp;amp;&amp;amp; result &amp;lt; 0) return -1; if(a &amp;lt; 0 &amp;amp;&amp;amp; b &amp;lt; 0 &amp;amp;&amp;amp; result &amp;gt; 0) return -1; return 0; } int main() { int num1, num2, sum; FILE *flag; char c; printf(&amp;#34;n1 &amp;gt; n1 + n2 OR n2 &amp;gt; n1 + n2 \n&amp;#34;); fflush(stdout); printf(&amp;#34;What two positive numbers can make this possible: \n&amp;#34;); fflush(stdout); if (scanf(&amp;#34;%d&amp;#34;, &amp;amp;num1) &amp;amp;&amp;amp; scanf(&amp;#34;%d&amp;#34;, &amp;amp;num2)) { printf(&amp;#34;You entered %d and %d\n&amp;#34;, num1, num2); fflush(stdout); sum = num1 + num2; if (addIntOvf(sum, num1, num2) == 0) { printf(&amp;#34;No overflow\n&amp;#34;); fflush(stdout); exit(0); } else if (addIntOvf(sum, num1, num2) == -1) { printf(&amp;#34;You have an integer overflow\n&amp;#34;); fflush(stdout); } if (num1 &amp;gt; 0 || num2 &amp;gt; 0) { flag = fopen(&amp;#34;flag.</description></item><item><title>Java Code Analysis!?!</title><link>https://lavafroth.is-a.dev/post/picoctf-web-java-code-analysis/</link><pubDate>Sat, 18 Mar 2023 07:10:17 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/picoctf-web-java-code-analysis/</guid><description>To get started we are given the username &amp;ldquo;user&amp;rdquo; and password &amp;ldquo;user&amp;rdquo; to log into the BookShelf Pico web application. We are also given the source code of the application.
Taking a look at the src/main/java/io/github/nandandesai/pico/security subdirectory of the project, we see that it uses JWT.
Interestingly, the file SecretGenerator.java in the aforementioned directory contains a weak hardcoded &amp;ldquo;random&amp;rdquo; value ðŸ˜±.
@Service class SecretGenerator { private Logger logger = LoggerFactory.getLogger(SecretGenerator.class); private static final String SERVER_SECRET_FILENAME = &amp;#34;server_secret.</description></item><item><title>Java Script Kiddie 2</title><link>https://lavafroth.is-a.dev/post/picoctf-web-java-script-kiddie-2/</link><pubDate>Fri, 03 Mar 2023 09:47:54 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/picoctf-web-java-script-kiddie-2/</guid><description>The challenge This is a web challenge involving javascript, meaning most of the solution is going to be client side. We are asked to visit the challenge page.
From here, we can view the source code of the page.
&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;script src=&amp;#34;jquery-3.3.1.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; var bytes = []; $.get(&amp;#34;bytes&amp;#34;, function(resp) { bytes = Array.from(resp.split(&amp;#34; &amp;#34;), x =&amp;gt; Number(x)); }); function assemble_png(u_in){ var LEN = 16; var key = &amp;#34;00000000000000000000000000000000&amp;#34;; var shifter; if(u_in.</description></item><item><title>Some Assembly Required 3</title><link>https://lavafroth.is-a.dev/post/picoctf-web-some-assembly-required-3/</link><pubDate>Thu, 09 Feb 2023 16:39:08 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/picoctf-web-some-assembly-required-3/</guid><description>This is a web exploitation challenge from 2021. It&amp;rsquo;s pretty old but has less solves as of writing this post. I figured, it&amp;rsquo;s worth talking about.
We are told to visit http://mercury.picoctf.net:60022/index.html where we find a simple textbox prompting us to submit the flag.
Looking at the page source by pressing ctrl u, we see that it is sourcing javascript code from rTEuOmSfG3.js.
&amp;lt;script src=&amp;#34;rTEuOmSfG3.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; While examining the javascript, we will notice that it is obfuscated and packed.</description></item><item><title>Pixelated</title><link>https://lavafroth.is-a.dev/post/picoctf-cryptography-pixelated/</link><pubDate>Tue, 22 Nov 2022 09:25:20 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/picoctf-cryptography-pixelated/</guid><description>This challenge gives use two images and asks us if we can make a flag out of them. At first glance, both the images look like noise. Upon a quick web lookup of visual cryptography, it appears that these separate images, known as shares of the original image, can be overlayed on each other to reconstruct the original image.
Exploration Now, I&amp;rsquo;m pretty sure that there are online services that will automatically solve these but I decided to write some code to solve this locally.</description></item><item><title>Operation Oni, Operation Orchid</title><link>https://lavafroth.is-a.dev/post/picoctf-forensics-operation-oni-operation-orchid/</link><pubDate>Fri, 18 Mar 2022 07:10:17 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/picoctf-forensics-operation-oni-operation-orchid/</guid><description>In this post, we&amp;rsquo;ll walk through the Operation Oni and Operation Orchid challenges from the PicoCTF competition held in March 2022. Both of these challenges involve the use of tools from The Sleuth Kit suite. In order to follow along, I&amp;rsquo;d recommend installing the suite of tools.
Operation Oni The challenge has an associated instance which we&amp;rsquo;ll need to log into using SSH using the following command:
ssh -i key_file -p 61948 ctf-player@saturn.</description></item><item><title>JAuth</title><link>https://lavafroth.is-a.dev/post/picoctf-web-challenge-jauth/</link><pubDate>Tue, 22 Feb 2022 14:49:34 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/picoctf-web-challenge-jauth/</guid><description>The challenge description states that most web application developers use third party components without testing their security. It mentions some past affected companies, then asks us to identify and exploit the vulnerable component for the challenge at http://saturn.picoctf.net:52025/
The goal is to become an admin. We are provied with the username test and the password Test123! to look around.
The challenge is a dummy bank portal. On login, we see the message:</description></item><item><title>Notepad</title><link>https://lavafroth.is-a.dev/post/picoctf-web-challenge-notepad/</link><pubDate>Mon, 21 Feb 2022 09:24:30 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/picoctf-web-challenge-notepad/</guid><description>At first glance the webapp looks like a stripped down version of Pastebin where we can post a text / code snippet. After submitting the query, we are redirected to an html page containing the content of the post.
The first thing I tried was triggering XSS (cross site scripting) with the following:
&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt; The application source directory tree looks like the following:
. â”œâ”€â”€ app.py â”œâ”€â”€ Dockerfile â”œâ”€â”€ flag.txt â”œâ”€â”€ static â””â”€â”€ templates â”œâ”€â”€ errors â”‚ â”œâ”€â”€ bad_content.</description></item></channel></rss>