<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linear Algebra on lavafroth</title><link>https://lavafroth.is-a.dev/tags/linear-algebra/</link><description>Recent content in Linear Algebra on lavafroth</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 14 Feb 2025 09:40:11 +0530</lastBuildDate><atom:link href="https://lavafroth.is-a.dev/tags/linear-algebra/index.xml" rel="self" type="application/rss+xml"/><item><title>In search of the smallest DNA complement function</title><link>https://lavafroth.is-a.dev/post/in-search-of-the-smallest-dna-compl/</link><pubDate>Fri, 14 Feb 2025 09:40:11 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/in-search-of-the-smallest-dna-compl/</guid><description>&lt;p&gt;For the past few weeks, I have been trying to come up with a fast and purely agebraic function to convert DNA bases to their
respective complements.&lt;/p&gt;
&lt;h2 id="problem-statement"&gt;Problem statement&lt;/h2&gt;
&lt;p&gt;Our goal is rather straightforward. We aim to create a mapping of the characters &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;c&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt; to their respective complements.
We choose to keep our solution one step behind the classical reverse complement which reverses the string after the mapping.&lt;/p&gt;</description></item></channel></rss>