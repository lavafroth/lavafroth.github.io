<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on lavafroth</title><link>https://lavafroth.is-a.dev/tags/python/</link><description>Recent content in Python on lavafroth</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sat, 10 Aug 2024 08:18:30 +0530</lastBuildDate><atom:link href="https://lavafroth.is-a.dev/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Painlessly setting up ML tooling on NixOS</title><link>https://lavafroth.is-a.dev/post/cuda-on-nixos-without-sacrificing-ones-sanity/</link><pubDate>Sat, 10 Aug 2024 08:18:30 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/cuda-on-nixos-without-sacrificing-ones-sanity/</guid><description>&lt;blockquote>
&lt;p>&lt;em>TL;DR:&lt;/em> Save &lt;a href="#the-flake">this flake&lt;/a>, run &lt;code>nix develop&lt;/code> and &lt;a href="#setting-up-pytorch">setup PyTorch as described&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/CUDA">CUDA&lt;/a> is a proprietary vendor lock-in for machine learning folks.
Training ML models is incredibly fast with CUDA as compared to CPUs due to the parallel
processing. So if you&amp;rsquo;re doing something serious, you have no other choice besides CUDA as of writing.
Although, OpenAI&amp;rsquo;s Triton and ZLUDA are worth keeping an eye on.&lt;/p>
&lt;p>Unlike your average distro, Nix will store its packages and libraries (derivations) in the Nix store instead of
locations like &lt;code>/usr/bin&lt;/code>, &lt;code>/usr/lib&lt;/code> and &lt;code>/usr/lib64&lt;/code>. &lt;a href="https://zero-to-nix.com/concepts/nix-store">This essentially prevents conflicts between installed packages&lt;/a>.&lt;/p></description></item><item><title>Treebox</title><link>https://lavafroth.is-a.dev/post/google-ctf-2022-treebox/</link><pubDate>Fri, 19 Aug 2022 10:04:36 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/google-ctf-2022-treebox/</guid><description>&lt;p>This challenge asks for python code as an input, converts it into an AST (abstract syntax tree) and if there aren&amp;rsquo;t any function calls or imports, executes the code. Our goal here is to avoid explicitly calling any functions yet reading the flag located at &lt;code>flag&lt;/code>. We also can&amp;rsquo;t import any modules explicitly. If we read the source code provided for the challenge, we can observe that the &lt;code>sys&lt;/code> module is already imported. We can piggyback on this fact to use its modules.&lt;/p></description></item><item><title>Notepad</title><link>https://lavafroth.is-a.dev/post/picoctf-web-challenge-notepad/</link><pubDate>Mon, 21 Feb 2022 09:24:30 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/picoctf-web-challenge-notepad/</guid><description>&lt;p>At first glance the webapp looks like a stripped down version of Pastebin where we can post a text / code snippet.
After submitting the query, we are redirected to an html page containing the content of the post.&lt;/p>
&lt;p>The first thing I tried was triggering XSS (cross site scripting) with the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">script&lt;/span>&amp;gt;&lt;span style="color:#a6e22e">alert&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>)&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The application source directory tree looks like the following:&lt;/p>
&lt;pre tabindex="0">&lt;code>.
├── app.py
├── Dockerfile
├── flag.txt
├── static
└── templates
 ├── errors
 │ ├── bad_content.html
 │ └── long_content.html
 └── index.html
&lt;/code>&lt;/pre>&lt;p>Let&amp;rsquo;s inspect the &lt;code>app.py&lt;/code> source.&lt;/p></description></item><item><title>Gadgeting in Python Jails</title><link>https://lavafroth.is-a.dev/post/gadgeting-in-python-jails/</link><pubDate>Thu, 09 Dec 2021 09:52:29 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/gadgeting-in-python-jails/</guid><description>&lt;p>We&amp;rsquo;ve all been there. That one CTF that wants to test your object oriented skills by confining you to a python jail.
Additionally some might even keep &lt;code>builtins&lt;/code> and &lt;code>eval&lt;/code> out of reach.&lt;/p>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=SN6EVIG4c-0">Here&lt;/a> is a cool video explanation by @pwnfunction on server side template
injection wherein he mentions a way to &amp;ldquo;gadget&amp;rdquo; our way out of Flask&amp;rsquo;s Jinja2 backend to get remote code execution.
Kudos to him for sharing this technique.&lt;/p></description></item></channel></rss>