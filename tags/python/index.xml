<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on lavafroth</title><link>https://lavafroth.is-a.dev/tags/python/</link><description>Recent content in Python on lavafroth</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sat, 10 Aug 2024 08:18:30 +0530</lastBuildDate><atom:link href="https://lavafroth.is-a.dev/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>CUDA on NixOS Without Sacrificing One's Sanity</title><link>https://lavafroth.is-a.dev/post/cuda-on-nixos-without-sacrificing-ones-sanity/</link><pubDate>Sat, 10 Aug 2024 08:18:30 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/cuda-on-nixos-without-sacrificing-ones-sanity/</guid><description>TL;DR: Save this flake, run nix develop and setup PyTorch as described
CUDA is a proprietary vendor lock-in for machine learning folks. Training ML models is incredibly fast with CUDA as compared to CPUs due to the parallel processing. So if you&amp;rsquo;re doing something serious, you have no other choice besides CUDA as of writing. Although, OpenAI&amp;rsquo;s Triton and ZLUDA are worth keeping an eye on.
Unlike your average distro, Nix will store its packages and libraries (derivations) in the Nix store instead of locations like /usr/bin, /usr/lib and /usr/lib64.</description></item><item><title>Treebox</title><link>https://lavafroth.is-a.dev/post/google-ctf-2022-treebox/</link><pubDate>Fri, 19 Aug 2022 10:04:36 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/google-ctf-2022-treebox/</guid><description>This challenge asks for python code as an input, converts it into an AST (abstract syntax tree) and if there aren&amp;rsquo;t any function calls or imports, executes the code. Our goal here is to avoid explicitly calling any functions yet reading the flag located at flag. We also can&amp;rsquo;t import any modules explicitly. If we read the source code provided for the challenge, we can observe that the sys module is already imported.</description></item><item><title>Notepad</title><link>https://lavafroth.is-a.dev/post/picoctf-web-challenge-notepad/</link><pubDate>Mon, 21 Feb 2022 09:24:30 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/picoctf-web-challenge-notepad/</guid><description>At first glance the webapp looks like a stripped down version of Pastebin where we can post a text / code snippet. After submitting the query, we are redirected to an html page containing the content of the post.
The first thing I tried was triggering XSS (cross site scripting) with the following:
&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt; The application source directory tree looks like the following:
. ├── app.py ├── Dockerfile ├── flag.txt ├── static └── templates ├── errors │ ├── bad_content.</description></item><item><title>Gadgeting in Python Jails</title><link>https://lavafroth.is-a.dev/post/gadgeting-in-python-jails/</link><pubDate>Thu, 09 Dec 2021 09:52:29 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/gadgeting-in-python-jails/</guid><description>We&amp;rsquo;ve all been there. That one CTF that wants to test your object oriented skills by confining you to a python jail. Additionally some might even keep builtins and eval out of reach.
Here is a cool video explanation by @pwnfunction on server side template injection wherein he mentions a way to &amp;ldquo;gadget&amp;rdquo; our way out of Flask&amp;rsquo;s Jinja2 backend to get remote code execution. Kudos to him for sharing this technique.</description></item></channel></rss>