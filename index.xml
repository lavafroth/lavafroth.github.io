<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>lavafroth</title><link>https://lavafroth.is-a.dev/</link><description>Recent content on lavafroth</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 04 Jul 2024 09:57:01 +0530</lastBuildDate><atom:link href="https://lavafroth.is-a.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Preventing Infinite Recursions From Eating Your Lunch</title><link>https://lavafroth.is-a.dev/post/preventing-infinite-recursions-from-eating-your-lunch/</link><pubDate>Thu, 04 Jul 2024 09:57:01 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/preventing-infinite-recursions-from-eating-your-lunch/</guid><description>Hello and welcome to the eighth instalment in the series where we build a parser for a domain specific language in Rust. I&amp;rsquo;d highly recommend going through the previous articles to make sense of what weâ€™ll talk about today.
After a bit of back and forth with my mentor, we landed on moving the logic that imports other config files into the parser crate itself. Config files can reference other modules using import statements of the following form:</description></item><item><title>Test Driven Development - The Pinnacle of Engineering</title><link>https://lavafroth.is-a.dev/post/test-driven-development-the-pinnacle-of-engineering/</link><pubDate>Mon, 24 Jun 2024 08:45:49 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/test-driven-development-the-pinnacle-of-engineering/</guid><description>Hello and welcome to the seventh instalment in the series where we build a parser for a domain specific language in Rust. I would highly recommend you to go through the previous articles to make sense of what weâ€™ll talk about today.
Tying loose ends Up until the last post, we had covered quite some ground, from building elementary expressions to the penultimate levels of abstraction for macroscopic expressions.
Let&amp;rsquo;s begin today&amp;rsquo;s conversation by finishing off where we left off.</description></item><item><title>Drowning</title><link>https://lavafroth.is-a.dev/art/drowning/</link><pubDate>Tue, 18 Jun 2024 09:30:00 +0530</pubDate><guid>https://lavafroth.is-a.dev/art/drowning/</guid><description>A cyborg head sinking in a pool of water. What more did you expect? Here&amp;rsquo;s a timelapse.</description></item><item><title>This Error</title><link>https://lavafroth.is-a.dev/art/thiserror/</link><pubDate>Tue, 18 Jun 2024 09:30:00 +0530</pubDate><guid>https://lavafroth.is-a.dev/art/thiserror/</guid><description>My first hand drawn YouTube thumbnail, I&amp;rsquo;m thinking of continuing to use lawyer ferris as my mascot both due to ferris being in the public domain as well as the sheer memeworthiness of my original creation. ðŸ¤£</description></item><item><title>Modes, Unbinds and Other Ensembled Parser Patterns</title><link>https://lavafroth.is-a.dev/post/modes-unbinds-and-other-ensembled-parser-patterns/</link><pubDate>Mon, 10 Jun 2024 08:27:06 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/modes-unbinds-and-other-ensembled-parser-patterns/</guid><description>Hello and welcome to the sixth instalment in this series where we build a parser for a domain specific language from scratch. I would highly recommend you to go through the previous articles to make sense of what we&amp;rsquo;ll talk about today.
So far, we have built ranges, shorthands and bindings, starting all the way down from primitives such as keys and modifiers. Continuing with the theme, we will ensemble these patterns together along with some newer syntax to build modes.</description></item><item><title>I Solemnly Swear to Never Buy a Gaming Laptop Again</title><link>https://lavafroth.is-a.dev/post/i-solemnly-swear-to-never-buy-a-gaming-laptop-again/</link><pubDate>Fri, 07 Jun 2024 17:01:01 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/i-solemnly-swear-to-never-buy-a-gaming-laptop-again/</guid><description>Around half a decade ago, I bought an Asus gaming laptop, one I&amp;rsquo;m currently using to write this article. Although it came preinstalled with Windows, I never let it even boot and instead opted for linux. Bill Gates can cry a river.
Despite switching distros multiple times, one sporadical issue my setup suffered from was the wireless card dying after a few minutes of booting the box. The only solution to this was to reboot my computer, classic!</description></item><item><title>Modeling More Realistic Keybinds With Modifiers</title><link>https://lavafroth.is-a.dev/post/modeling-more-realistic-keybinds-with-modifiers/</link><pubDate>Wed, 05 Jun 2024 10:26:13 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/modeling-more-realistic-keybinds-with-modifiers/</guid><description>Real world keybindings for shortcuts often involve more than just a simple keypress, especially outside the context of a single application. The general distinction for these two types involves modifier keys. When I talk about a shortcut bound to super v, chances are you automatically think of global bindings at the operating system or desktop environment level. Today we&amp;rsquo;ll go through the process of writing the grammar for these bindings for swhkd.</description></item><item><title>Edge cases? You Shall Not Pass!</title><link>https://lavafroth.is-a.dev/post/edge-cases-you-shall-not-pass/</link><pubDate>Mon, 03 Jun 2024 08:18:19 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/edge-cases-you-shall-not-pass/</guid><description>This post is a part of a series that explains the architecture of the config parser I am building for swhkd as a part of Google Summer of Code. I highly recommend reading through the previous posts as I&amp;rsquo;ll be referring to them from time to time.
In the last post I talked about key attributes that can be used as prefix to denote the timing of an event, on key press (send / ~) or release (on_release / @).</description></item><item><title>Timing is Key: A Tale of Keystrokes and Timings</title><link>https://lavafroth.is-a.dev/post/timing-is-key/</link><pubDate>Wed, 29 May 2024 21:18:22 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/timing-is-key/</guid><description>Whether you&amp;rsquo;re playing a video game or competing in a constrained attack-defense CTF, your keystroke timings matter. We at waycrate value your precision, to the extent that you can configure your keybindings to perform actions either on a key&amp;rsquo;s press or a release.
Hi, my name&amp;rsquo;s Himadri and this post is a part of a series explaining how we (basically just me) are rewriting the config parser for swhkd using EBNF grammar.</description></item><item><title>Keep the Keys Clackin'</title><link>https://lavafroth.is-a.dev/post/keep-the-keys-clackin/</link><pubDate>Mon, 27 May 2024 08:59:29 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/keep-the-keys-clackin/</guid><description>This is the second post in a series of posts I&amp;rsquo;m writing for Google Summer of Code. Each post covers a separate topic. While the previous posts might have given you an overview of ideas, this post will delve into more technical details. I highly recommend reading the previous posts because I will refer to them from time to time.
Let&amp;rsquo;s begin with why we chose EBNF grammar in pest.rs instead of regular expressions.</description></item><item><title>2 Afternoons, 2 Languages, 2 TUIs</title><link>https://lavafroth.is-a.dev/post/2-afternoons-2-languages-2-tuis/</link><pubDate>Thu, 23 May 2024 18:37:47 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/2-afternoons-2-languages-2-tuis/</guid><description>Yesterday I created a tool in Golang to help me render my animations a little faster. Although the alterior reason was to check my Golang proficiency, today I rewrote it in Rust and I was blown away by the differences in the final products.
When I&amp;rsquo;m rendering animations for a YouTube video, the general development iteration comprises me creating or modifying a file, switching to a different terminal pane and manually issuing a manim command for the respective file to render and play the animation.</description></item><item><title>A SWEET Little Parser</title><link>https://lavafroth.is-a.dev/post/a-sweet-little-config-parser/</link><pubDate>Fri, 17 May 2024 07:52:44 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/a-sweet-little-config-parser/</guid><description>A few days ago, I had announced my project for this year&amp;rsquo;s Google Summer of Code. Today I&amp;rsquo;ll be explanding upon that. I believe that to construct a good grammar, I should be able to understand and explain it well. So here goes.
General Idea SWHKD&amp;rsquo;s grammar parser, although similar to tools before it like sxhkd, has a more coherent syntax. For starters, every binding declaration is one or more accelerators followed by a composite key.</description></item><item><title>Wayland Tools Rock!</title><link>https://lavafroth.is-a.dev/post/wayland-tools-rock/</link><pubDate>Fri, 17 May 2024 07:52:44 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/wayland-tools-rock/</guid><description>Hey folks. Quite a few months have passed since I last posted here. As you might have known from my earlier posts, I&amp;rsquo;ve been daily driving Wayland instead of Xorg on my NixOS setup for quite some time now.
One of the tools I stumbled upon while writing my voice automation abomination was SWHKD (Simple Wayland HotKey Daemon). It&amp;rsquo;s a spiritual successor to sxhkd from the Xorg world and in a sense better than the former because it works not only in wayland sessions but also under X and TTY sessions!</description></item><item><title>Using an Android Phone as a webcam in NixOS</title><link>https://lavafroth.is-a.dev/post/android-phone-for-webcam-nixos/</link><pubDate>Sun, 10 Mar 2024 08:47:08 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/android-phone-for-webcam-nixos/</guid><description>I recently had to attend an online meeting for a software development event. While my PC did have a decent microphone, the built-in camera has been damaged to the extent that the best it can capture is this:
No, it&amp;rsquo;s not a close-up of the moon, it&amp;rsquo;s the refraction caused by the scuffs to the lens plus other sciency stuff I&amp;rsquo;m not qualified enough to explain to you.
I was aware that one can use ADB to use an Android phone&amp;rsquo;s camera as a makeshift webcam.</description></item><item><title>Nix Chan - Redraw</title><link>https://lavafroth.is-a.dev/art/nixchan/</link><pubDate>Sun, 21 Jan 2024 09:30:00 +0530</pubDate><guid>https://lavafroth.is-a.dev/art/nixchan/</guid><description>The waifu NixOS users deserve. Fun fact, this is a redraw after my dad (real artist btw) told me that the original piece had the anatomy messed up. Enjoy!</description></item><item><title>WIP Animation</title><link>https://lavafroth.is-a.dev/art/wip-animation/</link><pubDate>Fri, 19 Jan 2024 09:30:00 +0530</pubDate><guid>https://lavafroth.is-a.dev/art/wip-animation/</guid><description>A little *work in progress* animation trying to emulate realistic motions. Thank you Polina Tankilevitch for the reference video.</description></item><item><title>Kringlecon 2023 Writeup</title><link>https://lavafroth.is-a.dev/post/kringlecon-2023-writeup/</link><pubDate>Wed, 10 Jan 2024 19:51:32 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/kringlecon-2023-writeup/</guid><description>Happy new year everyone! As every year, I&amp;rsquo;ll begin this one with sharing my writeup for the 2023 Holiday Hack Challenge for Kringlecon. I must warn you that this is an incomplete writeup, I had been unable to finish all the challenges due to other important events in life.
With that out of the way, enjoy the writeup!
Christmas Island: Orientation Cranberry Pi This is a sanity check question to kick the tires.</description></item><item><title>Abstracting Structured Patterns in Concurrent Programming</title><link>https://lavafroth.is-a.dev/post/abstracting-structured-patterns-in-concurrent-programming/</link><pubDate>Wed, 06 Dec 2023 10:58:10 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/abstracting-structured-patterns-in-concurrent-programming/</guid><description>I hope this article provides a solid blueprint for building a concurrency management API. If you have questions or feel that I have missed something, feel free to talk about it in this repository&amp;rsquo;s issue tracker or the discussion board.
In recent months, I have come across multiple articles talking about the need of structured concurrency in modern programming languages as a built-in. Notably, in the article Notes on structured concurrency, or: Go statement considered harmful, the author compares the go statement used to spawn coroutines to goto statements used for jumping to other parts of code in early languages like COBOL.</description></item><item><title>Headache</title><link>https://lavafroth.is-a.dev/post/headache-reverse-engineering-amateursctf-2023/</link><pubDate>Thu, 07 Sep 2023 07:03:27 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/headache-reverse-engineering-amateursctf-2023/</guid><description>This challenge involves reverse engineering a polymorphic binary, one that modifies its own instructions during runtime.
Essentially, the binary checks if the current character equals a known value and xor decrypts the next section where the code jumps to. If the characters don&amp;rsquo;t match, the logic short-circuits and the program exits.
This process of checking the character and decrypting the next branch continues like opening up a Matryoshka doll until the last branch which returns instead of calling the decryption subroutine.</description></item><item><title>Privacy Policy</title><link>https://lavafroth.is-a.dev/privacy/</link><pubDate>Mon, 04 Sep 2023 10:10:09 +0530</pubDate><guid>https://lavafroth.is-a.dev/privacy/</guid><description>This site does NOT use cookies or third party analytics to track you. All resources that are served, including fonts, styles and scripts are local and not sourced from CDNs. Client side local storage is only used to store the setting for the light or dark theme.
The posts here can be viewed regardless of whether javascript is enabled. The only features relying on javascript are the theme switcher (try clicking the sun or moon icon) and the search box.</description></item><item><title>Compact XOR</title><link>https://lavafroth.is-a.dev/post/compact-xor-crypto-challenge-amateursctf-2023/</link><pubDate>Thu, 24 Aug 2023 18:05:59 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/compact-xor-crypto-challenge-amateursctf-2023/</guid><description>Description I found some hex in a file called fleg, but Iâ€™m not sure how itâ€™s encoded. Iâ€™m pretty sure itâ€™s some kind of xorâ€¦
Exploration We begin by creating a new rust project.
cargo new amateurs cd amateurs cargo add hex cargo add itertools Let&amp;rsquo;s decode the hexadecimal contents of the file using the following Rust code:
fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; { let bytes = hex::decode(&amp;#34;610c6115651072014317463d73127613732c73036102653a6217742b701c61086e1a651d742b69075f2f6c0d69075f2c690e681c5f673604650364023944&amp;#34;)?; let stream = String::from_utf8_lossy(&amp;amp;bytes); println!</description></item><item><title>Volcano</title><link>https://lavafroth.is-a.dev/post/volcano-reverse-engineering-amateursctf-2023/</link><pubDate>Fri, 21 Jul 2023 18:29:59 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/volcano-reverse-engineering-amateursctf-2023/</guid><description>This reversing challenge is very mathematical, focusing mainly on modulo congruences. Like all challenges, there is some scary looking obfuscation for the fun which I&amp;rsquo;ll try my best to explain. The challenge description says that it was inspired by recent &amp;ldquo;traumatic&amp;rdquo; events but I&amp;rsquo;m oblivious to what that reference meant.
Decompilation We start off with downloading the binary and opening it in Ghidra.
In the list of functions under the Symbol Tree, we can navigate to the entry function which looks like:</description></item><item><title>Waiting an Eternity</title><link>https://lavafroth.is-a.dev/post/wait-an-eternity-web-challenge-amateursctf-2023/</link><pubDate>Wed, 19 Jul 2023 07:53:17 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/wait-an-eternity-web-challenge-amateursctf-2023/</guid><description>This was a fairly straightforward and fun challenge that required a bit of common sense to solve. We are given the URL https://waiting-an-eternity.amt.rs to begin with.
Let&amp;rsquo;s use curl with its verbose flag to fetch this URL.
curl -v &amp;#34;https://waiting-an-eternity.amt.rs&amp;#34; We get a response that tells us to wait an enternity.
&amp;gt; GET / HTTP/2 &amp;gt; Host: waiting-an-eternity.amt.rs &amp;gt; User-Agent: curl/8.1.1 &amp;gt; Accept: */* &amp;gt; &amp;lt; HTTP/2 200 &amp;lt; content-type: text/html; charset=utf-8 &amp;lt; date: Tue, 18 Jul 2023 04:28:52 GMT &amp;lt; refresh: 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000; url=./secret-site?</description></item><item><title>I Switched to NixOS</title><link>https://lavafroth.is-a.dev/post/i-switched-to-nixos/</link><pubDate>Sat, 08 Jul 2023 09:29:34 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/i-switched-to-nixos/</guid><description>Hi. It&amp;rsquo;s been quite a while since I had last posted. I had been spending my time on some programming projects that withheld me from even participating in CTFs. Tired of this workflow that I somehow spiraled into, I&amp;rsquo;m now seeking to learn new things in an attempt to break out of this workflow.
The End of an Overarching Journey As any of my long time audience might be familiar with, I daily drove Arch Linux.</description></item><item><title>Twosum</title><link>https://lavafroth.is-a.dev/post/picoctf-binary-exploitation-twosum/</link><pubDate>Mon, 10 Apr 2023 08:44:28 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/picoctf-binary-exploitation-twosum/</guid><description>This is a rather simple binary exploitation challenge. We are given the following source code for the program running on the remote server:
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; static int addIntOvf(int result, int a, int b) { result = a + b; if(a &amp;gt; 0 &amp;amp;&amp;amp; b &amp;gt; 0 &amp;amp;&amp;amp; result &amp;lt; 0) return -1; if(a &amp;lt; 0 &amp;amp;&amp;amp; b &amp;lt; 0 &amp;amp;&amp;amp; result &amp;gt; 0) return -1; return 0; } int main() { int num1, num2, sum; FILE *flag; char c; printf(&amp;#34;n1 &amp;gt; n1 + n2 OR n2 &amp;gt; n1 + n2 \n&amp;#34;); fflush(stdout); printf(&amp;#34;What two positive numbers can make this possible: \n&amp;#34;); fflush(stdout); if (scanf(&amp;#34;%d&amp;#34;, &amp;amp;num1) &amp;amp;&amp;amp; scanf(&amp;#34;%d&amp;#34;, &amp;amp;num2)) { printf(&amp;#34;You entered %d and %d\n&amp;#34;, num1, num2); fflush(stdout); sum = num1 + num2; if (addIntOvf(sum, num1, num2) == 0) { printf(&amp;#34;No overflow\n&amp;#34;); fflush(stdout); exit(0); } else if (addIntOvf(sum, num1, num2) == -1) { printf(&amp;#34;You have an integer overflow\n&amp;#34;); fflush(stdout); } if (num1 &amp;gt; 0 || num2 &amp;gt; 0) { flag = fopen(&amp;#34;flag.</description></item><item><title>Java Code Analysis!?!</title><link>https://lavafroth.is-a.dev/post/picoctf-web-java-code-analysis/</link><pubDate>Sat, 18 Mar 2023 07:10:17 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/picoctf-web-java-code-analysis/</guid><description>To get started we are given the username &amp;ldquo;user&amp;rdquo; and password &amp;ldquo;user&amp;rdquo; to log into the BookShelf Pico web application. We are also given the source code of the application.
Taking a look at the src/main/java/io/github/nandandesai/pico/security subdirectory of the project, we see that it uses JWT.
Interestingly, the file SecretGenerator.java in the aforementioned directory contains a weak hardcoded &amp;ldquo;random&amp;rdquo; value ðŸ˜±.
@Service class SecretGenerator { private Logger logger = LoggerFactory.getLogger(SecretGenerator.class); private static final String SERVER_SECRET_FILENAME = &amp;#34;server_secret.</description></item><item><title>Java Script Kiddie 2</title><link>https://lavafroth.is-a.dev/post/picoctf-web-java-script-kiddie-2/</link><pubDate>Fri, 03 Mar 2023 09:47:54 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/picoctf-web-java-script-kiddie-2/</guid><description>The challenge This is a web challenge involving javascript, meaning most of the solution is going to be client side. We are asked to visit the challenge page.
From here, we can view the source code of the page.
&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;script src=&amp;#34;jquery-3.3.1.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; var bytes = []; $.get(&amp;#34;bytes&amp;#34;, function(resp) { bytes = Array.from(resp.split(&amp;#34; &amp;#34;), x =&amp;gt; Number(x)); }); function assemble_png(u_in){ var LEN = 16; var key = &amp;#34;00000000000000000000000000000000&amp;#34;; var shifter; if(u_in.</description></item><item><title>Some Assembly Required 3</title><link>https://lavafroth.is-a.dev/post/picoctf-web-some-assembly-required-3/</link><pubDate>Thu, 09 Feb 2023 16:39:08 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/picoctf-web-some-assembly-required-3/</guid><description>This is a web exploitation challenge from 2021. It&amp;rsquo;s pretty old but has less solves as of writing this post. I figured, it&amp;rsquo;s worth talking about.
We are told to visit http://mercury.picoctf.net:60022/index.html where we find a simple textbox prompting us to submit the flag.
Looking at the page source by pressing ctrl u, we see that it is sourcing javascript code from rTEuOmSfG3.js.
&amp;lt;script src=&amp;#34;rTEuOmSfG3.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; While examining the javascript, we will notice that it is obfuscated and packed.</description></item><item><title>Kringlecon 2022 Writeup</title><link>https://lavafroth.is-a.dev/post/kringlecon-2022-writeup/</link><pubDate>Mon, 09 Jan 2023 10:36:35 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/kringlecon-2022-writeup/</guid><description>This writeup is rather haphazard as I jumped around from one place to another solving different unrelated challenges. Although the writeup covers all the challenges, it definitely is not sequential. Just wanted to point that out before diving in.
Clone with a Difference This challenge wants us to clone a git repository. It&amp;rsquo;s using git with ssh for cloning which doesn&amp;rsquo;t seem to work.
git clone git@haugfactory.com:asnowball/aws_scripts.git We can clone this the HTTPS way:</description></item><item><title>Pixelated</title><link>https://lavafroth.is-a.dev/post/picoctf-cryptography-pixelated/</link><pubDate>Tue, 22 Nov 2022 09:25:20 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/picoctf-cryptography-pixelated/</guid><description>This challenge gives use two images and asks us if we can make a flag out of them. At first glance, both the images look like noise. Upon a quick web lookup of visual cryptography, it appears that these separate images, known as shares of the original image, can be overlayed on each other to reconstruct the original image.
Exploration Now, I&amp;rsquo;m pretty sure that there are online services that will automatically solve these but I decided to write some code to solve this locally.</description></item><item><title>The Make Everything Ok Button</title><link>https://lavafroth.is-a.dev/post/the-make-everything-ok-button/</link><pubDate>Sun, 09 Oct 2022 09:20:30 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/the-make-everything-ok-button/</guid><description>Disclaimer Before I begin, I must warn you that DeepFaceLab is just a tool, neither good nor evil. Neither Deepfacelab nor the docker image is meant for generating illicit or obscene imagery. You shall be solely liable for anything you do with these tools.
You know the drill Everytime I have to install DeepFaceLab on any of my systems, it comes with a lot of hassle mostly due to incompatibilities between the GPU libraries and Python versions.</description></item><item><title>Netrunner</title><link>https://lavafroth.is-a.dev/art/netrunner/</link><pubDate>Sun, 11 Sep 2022 09:30:00 +0530</pubDate><guid>https://lavafroth.is-a.dev/art/netrunner/</guid><description>This piece takes heavy inspiration from Mirror&amp;rsquo;s Edge, Cyberpunk Edgerunners, Ergo Proxy and the like, things that gave me a sense of the term Netrunner.</description></item><item><title>Treebox</title><link>https://lavafroth.is-a.dev/post/google-ctf-2022-treebox/</link><pubDate>Fri, 19 Aug 2022 10:04:36 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/google-ctf-2022-treebox/</guid><description>This challenge asks for python code as an input, converts it into an AST (abstract syntax tree) and if there aren&amp;rsquo;t any function calls or imports, executes the code. Our goal here is to avoid explicitly calling any functions yet reading the flag located at flag. We also can&amp;rsquo;t import any modules explicitly. If we read the source code provided for the challenge, we can observe that the sys module is already imported.</description></item><item><title>I Saw a Little Elf</title><link>https://lavafroth.is-a.dev/post/r0-i-saw-a-little-elf/</link><pubDate>Fri, 19 Aug 2022 09:57:34 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/r0-i-saw-a-little-elf/</guid><description>Introduction This challenge asks us to connect to an webpage with a base64 encoded message. If we try to decode the message manually, the decoded message ends up either in a reversed ELF (Executable and Linkable Format) binary or more base64 to be decoded.
Trying this multiple times, it becomes apparent that the challenge reverses an ELF binary, encodes it one or more times in base64 and sends it to us.</description></item><item><title>RingZer0 CTF Hash Me Reloaded</title><link>https://lavafroth.is-a.dev/post/r0-hash-me-reloaded/</link><pubDate>Fri, 19 Aug 2022 09:57:15 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/r0-hash-me-reloaded/</guid><description>In this RingZer0 challenge, we are to visit the challenge url where we are given 2 seconds to SHA512 hash the message represented by the binary provided string. We must send the response with the request parameter r. Let&amp;rsquo;s write a go program to do that.
First let&amp;rsquo;s declare the url as a constant.
const uri = &amp;#34;http://challenges.ringzer0team.com:10014/&amp;#34; We fetch the challenge page and defer closing its body once the program ends.</description></item><item><title>Hash Me Please</title><link>https://lavafroth.is-a.dev/post/r0-hash-me-please/</link><pubDate>Fri, 19 Aug 2022 09:57:00 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/r0-hash-me-please/</guid><description>In this RingZer0 challenge, we are asked to visit http://challenges.ringzer0team.com:10013/ and are given 2 seconds to hash the provided message using the SHA512 algorithm. We must send the response as http://challenges.ringzer0team.com:10013/?r=response and to do that, we&amp;rsquo;ll be using some Golang.
Let&amp;rsquo;s declare the URI as a constant.
const uri = &amp;#34;http://challenges.ringzer0team.com:10013/&amp;#34; We fetch the challenge page using the Get function from the http standard library, checking for errors along the way.</description></item><item><title>Oh my God, they killed Kenny!</title><link>https://lavafroth.is-a.dev/post/oh-my-god-they-killed-kenny/</link><pubDate>Tue, 02 Aug 2022 09:26:51 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/oh-my-god-they-killed-kenny/</guid><description>Introduction Despite its infamy for profanity and dark, satiric humor, I&amp;rsquo;ve been a huge fan of South Park over the years. I&amp;rsquo;d like you to try out a random episode of South Park. Before you walk away saying, &amp;ldquo;Screw you guys, I&amp;rsquo;m going home&amp;rdquo;, I&amp;rsquo;ll be sharing a little trick to watch a random episode without even launching the browser.
Prerequisites: Nushell mpv youtube-dl or yt-dlp Gone scripting South Park&amp;rsquo;s official website has a route called random-episode which redirects us to, well, a random episode.</description></item><item><title>Bash Jail 3</title><link>https://lavafroth.is-a.dev/post/ringzer0ctf-bash-jail3/</link><pubDate>Sun, 24 Jul 2022 12:29:56 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/ringzer0ctf-bash-jail3/</guid><description>The challenge Logging into the box we are told that the flag is located at /home/level3/flag.txt.
function check_space { if [[ $1 == *[bdksc]* ]] then return 0 fi return 1 } while : do echo &amp;#34;Your input:&amp;#34; read input if check_space &amp;#34;$input&amp;#34; then echo -e &amp;#39;\033[0;31mRestricted characters has been used\033[0m&amp;#39; else output=`$input` &amp;amp;&amp;gt;/dev/null echo &amp;#34;Command executed&amp;#34; fi done We are also told that this prompt is launched using ./prompt.sh 2&amp;gt;/dev/null which means we cannot exfiltrate the flag from stderr since it is blocked.</description></item><item><title>Bash Jail 2</title><link>https://lavafroth.is-a.dev/post/ringzer0ctf-bash-jail2/</link><pubDate>Sun, 24 Jul 2022 12:28:56 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/ringzer0ctf-bash-jail2/</guid><description>The challenge Logging into the box we are told that the flag is located at /home/level2/flag.txt
Challenge bash code function check_space { if [[ $1 == *[bdks&amp;#39;;&amp;#39;&amp;#39;&amp;amp;&amp;#39;&amp;#39; &amp;#39;]* ]] then return 0 fi return 1 } while : do echo &amp;#34;Your input:&amp;#34; read input if check_space &amp;#34;$input&amp;#34; then echo -e &amp;#39;\033[0;31mRestricted characters has been used\033[0m&amp;#39; else output=&amp;#34;echo Your command is: $input&amp;#34; eval $output fi done Inference This time, the check_space function returns a 1 if there are any characters in the input string among b,d,k,s, a semicolon, an ampersand and a whitespace.</description></item><item><title>Bash Jail 1</title><link>https://lavafroth.is-a.dev/post/ringzer0ctf-bash-jail1/</link><pubDate>Sun, 24 Jul 2022 12:27:56 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/ringzer0ctf-bash-jail1/</guid><description>The challenge Upon SSHing into the box, we are told that the flag is located at /home/level1/flag.txt
Challenge bash code:
while : do echo &amp;#34;Your input:&amp;#34; read input output=`$input` done Inference and experimenation The script is reading an input, executes it and then stores it in the output variable without ever displaying the output to the console.
I tried a dummy command to see if I could see its stderr since command substitution (backticks) only capture the stdout.</description></item><item><title>whoami</title><link>https://lavafroth.is-a.dev/about/</link><pubDate>Sat, 23 Jul 2022 19:11:10 +0530</pubDate><guid>https://lavafroth.is-a.dev/about/</guid><description>Hi, this is Himadri. I&amp;rsquo;m a self taught programmer and a digital artist. You might have arrived here from my YouTube channel. If not, just know that I create high quality educational videos to explain computer science concepts, programming languages and the like.
As for my education, I had graduated high school in 2022. I&amp;rsquo;m on the lookout for universities that can provide more than subpar education. I&amp;rsquo;d appreciate it if the university can financially sponsor me to an extent given I come from a second world country.</description></item><item><title>Truce</title><link>https://lavafroth.is-a.dev/art/tyler-joseph-portrait/</link><pubDate>Sat, 23 Jul 2022 19:07:32 +0530</pubDate><guid>https://lavafroth.is-a.dev/art/tyler-joseph-portrait/</guid><description>A painting of the lead vocalist of Twenty Ã˜ne PilÃ¸ts, named after one of my favorite songs from their album Vessel.</description></item><item><title>She's a Rebel</title><link>https://lavafroth.is-a.dev/art/shes-a-rebel/</link><pubDate>Sun, 17 Apr 2022 17:01:44 +0530</pubDate><guid>https://lavafroth.is-a.dev/art/shes-a-rebel/</guid><description>Clearly the title was an afterthought.</description></item><item><title>Operation Oni, Operation Orchid</title><link>https://lavafroth.is-a.dev/post/picoctf-forensics-operation-oni-operation-orchid/</link><pubDate>Fri, 18 Mar 2022 07:10:17 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/picoctf-forensics-operation-oni-operation-orchid/</guid><description>In this post, we&amp;rsquo;ll walk through the Operation Oni and Operation Orchid challenges from the PicoCTF competition held in March 2022. Both of these challenges involve the use of tools from The Sleuth Kit suite. In order to follow along, I&amp;rsquo;d recommend installing the suite of tools.
Operation Oni The challenge has an associated instance which we&amp;rsquo;ll need to log into using SSH using the following command:
ssh -i key_file -p 61948 ctf-player@saturn.</description></item><item><title>JAuth</title><link>https://lavafroth.is-a.dev/post/picoctf-web-challenge-jauth/</link><pubDate>Tue, 22 Feb 2022 14:49:34 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/picoctf-web-challenge-jauth/</guid><description>The challenge description states that most web application developers use third party components without testing their security. It mentions some past affected companies, then asks us to identify and exploit the vulnerable component for the challenge at http://saturn.picoctf.net:52025/
The goal is to become an admin. We are provied with the username test and the password Test123! to look around.
The challenge is a dummy bank portal. On login, we see the message:</description></item><item><title>Liberating 14GiB of disk space</title><link>https://lavafroth.is-a.dev/post/liberating-14gib-of-space/</link><pubDate>Mon, 21 Feb 2022 13:15:26 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/liberating-14gib-of-space/</guid><description>The idea is simple:
Remove all duplicates, including zero length files Fine tuning: Hand-pick and remove files deemed unnecessary Since the mileage for second step might vary from person to person, I&amp;rsquo;ll elaborate on the first step.
I chose jdupes as my weapon of choice for finding and removing the duplicates. It&amp;rsquo;s free and open-source and is cross platform.
For a given folder we would run the following to wipe the duplicates:</description></item><item><title>Notepad</title><link>https://lavafroth.is-a.dev/post/picoctf-web-challenge-notepad/</link><pubDate>Mon, 21 Feb 2022 09:24:30 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/picoctf-web-challenge-notepad/</guid><description>At first glance the webapp looks like a stripped down version of Pastebin where we can post a text / code snippet. After submitting the query, we are redirected to an html page containing the content of the post.
The first thing I tried was triggering XSS (cross site scripting) with the following:
&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt; The application source directory tree looks like the following:
. â”œâ”€â”€ app.py â”œâ”€â”€ Dockerfile â”œâ”€â”€ flag.txt â”œâ”€â”€ static â””â”€â”€ templates â”œâ”€â”€ errors â”‚ â”œâ”€â”€ bad_content.</description></item><item><title>Gadgeting in Python Jails</title><link>https://lavafroth.is-a.dev/post/gadgeting-in-python-jails/</link><pubDate>Thu, 09 Dec 2021 09:52:29 +0530</pubDate><guid>https://lavafroth.is-a.dev/post/gadgeting-in-python-jails/</guid><description>We&amp;rsquo;ve all been there. That one CTF that wants to test your object oriented skills by confining you to a python jail. Additionally some might even keep builtins and eval out of reach.
Here is a cool video explanation by @pwnfunction on server side template injection wherein he mentions a way to &amp;ldquo;gadget&amp;rdquo; our way out of Flask&amp;rsquo;s Jinja2 backend to get remote code execution. Kudos to him for sharing this technique.</description></item></channel></rss>