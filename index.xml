<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>lavafroth</title><link>https://lavafroth.github.io/</link><description>Recent content on lavafroth</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 24 Jul 2022 12:29:56 +0530</lastBuildDate><atom:link href="https://lavafroth.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>RingZer0 CTF Bash Jail 3</title><link>https://lavafroth.github.io/post/ringzer0ctf-bash-jail3/</link><pubDate>Sun, 24 Jul 2022 12:29:56 +0530</pubDate><guid>https://lavafroth.github.io/post/ringzer0ctf-bash-jail3/</guid><description>The challenge Logging into the box we are told that the flag is located at /home/level3/flag.txt.
function check_space { if [[ $1 == *[bdksc]* ]] then return 0 fi return 1 } while : do echo &amp;#34;Your input:&amp;#34; read input if check_space &amp;#34;$input&amp;#34; then echo -e &amp;#39;\033[0;31mRestricted characters has been used\033[0m&amp;#39; else output=`$input` &amp;amp;&amp;gt;/dev/null echo &amp;#34;Command executed&amp;#34; fi done We are also told that this prompt is launched using ./prompt.sh 2&amp;gt;/dev/null which means we cannot exfiltrate the flag from stderr since it is blocked.</description></item><item><title>RingZer0 CTF Bash Jail 2</title><link>https://lavafroth.github.io/post/ringzer0ctf-bash-jail2/</link><pubDate>Sun, 24 Jul 2022 12:28:56 +0530</pubDate><guid>https://lavafroth.github.io/post/ringzer0ctf-bash-jail2/</guid><description>The challenge Logging into the box we are told that the flag is located at /home/level2/flag.txt
Challenge bash code: function check_space { if [[ $1 == *[bdks&amp;#39;;&amp;#39;&amp;#39;&amp;amp;&amp;#39;&amp;#39; &amp;#39;]* ]] then return 0 fi return 1 } while : do echo &amp;#34;Your input:&amp;#34; read input if check_space &amp;#34;$input&amp;#34; then echo -e &amp;#39;\033[0;31mRestricted characters has been used\033[0m&amp;#39; else output=&amp;#34;echo Your command is: $input&amp;#34; eval $output fi done Inference: This time, the check_space function returns a 1 if there are any characters in the input string among b,d,k,s, a semicolon, an ampersand and a whitespace.</description></item><item><title>RingZer0 CTF Bash Jail 1</title><link>https://lavafroth.github.io/post/ringzer0ctf-bash-jail1/</link><pubDate>Sun, 24 Jul 2022 12:27:56 +0530</pubDate><guid>https://lavafroth.github.io/post/ringzer0ctf-bash-jail1/</guid><description>The challenge Upon SSHing into the box, we are told that the flag is located at /home/level1/flag.txt
Challenge bash code:
while : do echo &amp;#34;Your input:&amp;#34; read input output=`$input` done Inference and experimenation The script is reading an input, executes it and then stores it in the output variable without ever displaying the output to the console.
I tried a dummy command to see if I could see its stderr since command substitution (backticks) only capture the stdout.</description></item><item><title>whoami</title><link>https://lavafroth.github.io/about/</link><pubDate>Sat, 23 Jul 2022 19:11:10 +0530</pubDate><guid>https://lavafroth.github.io/about/</guid><description>How lethal can a bored eight-year-old with an urge to destroy technology be? Well, fasten your seatbelts, I&amp;rsquo;ve got first-hand experience. It all began when I wanted to make &amp;ldquo;fake&amp;rdquo; malware to annoy family members. I learned batch programming, a little bit of web design here, some C there. Eventually, I spent eight semesters on a Java course from school as a part of formal education. Despite having learnt quite a handful of languages by myself, I prefer Go as my weapon of choice because of its balanced profile, faster than Python while being more productive than C.</description></item><item><title>Operation Oni, Operation Orchid - Forensics Challenges | PicoCTF 2022</title><link>https://lavafroth.github.io/post/picoctf-2022-forensics-challenges-operation-oni-operation-orchid/</link><pubDate>Fri, 18 Mar 2022 07:10:17 +0530</pubDate><guid>https://lavafroth.github.io/post/picoctf-2022-forensics-challenges-operation-oni-operation-orchid/</guid><description>In this post, we&amp;rsquo;ll walk through the Operation Oni and Operation Orchid challenges from the PicoCTF competition held in March 2022. Both of these challenges involve the use of tools from The Sleuth Kit suite. In order to follow along, I&amp;rsquo;d recommend installing the suite of tools.
Operation Oni The challenge has an associated instance which we&amp;rsquo;ll need to log into using SSH using the following command:
ssh -i key_file -p 61948 ctf-player@saturn.</description></item><item><title>Liberating 14GiB of disk space</title><link>https://lavafroth.github.io/post/liberating-14gib-of-space/</link><pubDate>Mon, 21 Feb 2022 13:15:26 +0530</pubDate><guid>https://lavafroth.github.io/post/liberating-14gib-of-space/</guid><description>The idea is simple:
Remove all duplicates, including zero length files Fine tuning: Hand-pick and remove files deemed unnecessary Since the mileage for second step might vary from person to person, I&amp;rsquo;ll elaborate on the first step.
I chose jdupes as my weapon of choice for finding and removing the duplicates. It&amp;rsquo;s free and open-source and is cross platform.
For a given folder we would run the following to wipe the duplicates:</description></item><item><title>PicoCTF web challenge: Notepad</title><link>https://lavafroth.github.io/post/picoctf-web-challenge-notepad/</link><pubDate>Mon, 21 Feb 2022 09:24:30 +0530</pubDate><guid>https://lavafroth.github.io/post/picoctf-web-challenge-notepad/</guid><description>At first glance the webapp looks like a stripped down version of Pastebin where we can post a text / code snippet. After submitting the query, we are redirected to an html page containing the content of the post.
The first thing I tried was triggering XSS (cross site scripting) with the following:
&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt; The application source directory tree looks like the following:
. ├── app.py ├── Dockerfile ├── flag.txt ├── static └── templates ├── errors │ ├── bad_content.</description></item></channel></rss>